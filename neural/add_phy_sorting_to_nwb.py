#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Mar 27 08:38:34 2023

@author: daltonm
"""

from pynwb import NWBHDF5IO
from neuroconv.datainterfaces import PhySortingInterface

# Append the sorting data to the NWB file by using setting the overwrite argument to False
# import phy curation

phy_path = '/project/nicho/data/marmosets/electrophys_data_for_processing/TY20210211_freeAndMoths/phy_TDC/'
write_options = dict(write_as='units', 
                     units_name='units', 
                     units_description='sorted, autogenerated by neuroconv from phy curation')

phy_interface = PhySortingInterface(folder_path = phy_path, exclude_cluster_groups='noise')
phy_extractor = phy_interface.sorting_extractor

nwb_file = '/project/nicho/data/marmosets/electrophys_data_for_processing/TY20210211_freeAndMoths/TY20210211_freeAndMoths-003.nwb'
nwb_outfile = '/project/nicho/data/marmosets/electrophys_data_for_processing/TY20210211_freeAndMoths/TESTING_TY20210211_freeAndMoths-003.nwb'

unitIDs = phy_extractor.get_unit_ids()
try:
    channel_index = phy_extractor.get_property(key = 'group', ids = unitIDs)
    test = channel_index[0]
except:
    channel_index = phy_extractor.get_property(key = 'ch', ids = unitIDs)
    test = channel_index[0]

with NWBHDF5IO(nwb_file, 'r') as io:
    nwb = io.read()
    electrodes = nwb.electrodes.to_dataframe() 
    session_start_time = nwb.session_start_time

electrode_labels = [electrodes.electrode_label[chIdx] for chIdx in channel_index]
x                = [electrodes.x[chIdx] for chIdx in channel_index]
y                = [electrodes.y[chIdx] for chIdx in channel_index]
z                = [electrodes.z[chIdx] for chIdx in channel_index]

properties_to_update = dict(channel_index=channel_index,
                            electrode_label=electrode_labels,
                            x=x,
                            y=y,
                            z=z)

for key, val in properties_to_update.items():
    phy_extractor.set_property(key = key,
                               values = val,
                               ids=unitIDs, 
                               missing_value=None)

for col_to_del in ['ch', 'group', 'chan_group', 'depth', 'sh']:
    try:
        del phy_extractor._properties[col_to_del]
    except:
        continue


metadata = phy_interface.get_metadata()
metadata["NWBFile"].update(session_start_time=session_start_time)

phy_interface.run_conversion(nwbfile_path=nwb_outfile,
                             overwrite=False,
                             metadata=metadata,
                             **write_options)