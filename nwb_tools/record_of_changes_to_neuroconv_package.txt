#+++
/project/nicho/environments/spyder/lib/python3.9/site-packages/spikeinterface/extractors/neoextractors/neobaseextractors:
class NeoBaseSortingExtractor(_NeoBaseExtractor, BaseRecording):
      below line 218: BaseSorting.__init__(self, sampling_frequency, unit_ids)
      insert:         self.set_property('spike_channel_name', spike_channels["name"])



/project/nicho/environments/spyder/lib/python3.9/site-packages/neuroconv/nwbconverter.py:
class NWBConverter:
      change line 188-90 from: data_interface.run_conversion(
                                  nwbfile=nwbfile_out, metadata=metadata, **conversion_options_to_run.get(interface_name, dict())
                               )
      to:                      data_interface.run_conversion(
                                  nwbfile=nwbfile_out, metadata=metadata, **conversion_options_to_run.get(interface_name, dict()), **write_options.get(interface_name, dict())
                               )

/project/nicho/environments/spyder/lib/python3.9/site-packages/neuroconv/datainterfaces/ecephys/basesortingextractorinterface.py:
Line 101
Change:     def run_conversion(
                self,
                nwbfile_path: OptionalFilePathType = None,
                nwbfile: Optional[NWBFile] = None,
                metadata: Optional[dict] = None,
                overwrite: bool = False,
                stub_test: bool = False,
                write_ecephys_metadata: bool = False,
            ): 

To:         def run_conversion(
                self,
                nwbfile_path: OptionalFilePathType = None,
                nwbfile: Optional[NWBFile] = None,
                metadata: Optional[dict] = None,
                overwrite: bool = False,
                stub_test: bool = False,
                write_ecephys_metadata: bool = False,
                write_as: Optional[str] = None,
                units_name: Optional[str] = None,
                units_description: Optional[str] = None,
            ): 

Line 175 - 190
Change: write_sorting(
            sorting_extractor,
            nwbfile_path=nwbfile_path,
            nwbfile=nwbfile,
            metadata=metadata,
            overwrite=overwrite,
            verbose=self.verbose,
            property_descriptions=property_descriptions,
        )

To:     write_as = "units" if write_as is None else write_as
        units_name = "units" if units_name is None else units_name
        units_description = "Autogenerated by neuroconv." if units_description is None else units_description

        write_sorting(
            sorting_extractor,
            nwbfile_path=nwbfile_path,
            nwbfile=nwbfile,
            metadata=metadata,
            overwrite=overwrite,
            verbose=self.verbose,
            property_descriptions=property_descriptions,
            write_as=write_as,
            units_name=units_name,
            units_description=units_description,
        )

added terms for 'start_index_modifier' variable in: 
    .../neuroconv/baseextractorinterface.py,
    .../neuroconv/datainterfaces/ecephys/phy/phydatainterface.py
    .../neuroconv/datainterfaces/ecephys/basesortingextractorinterface.py
    .../spikeinterface/extractors/phykilosortextractors.py

In .../neuroconv/datainterfaces/ecephys/basesortingextractorinterface.py, change init term in class BaseSortingExtractorInterface(BaseExtractorInterface):
    def __init__(self, verbose=True, start_index_modifier=None, **source_data):
        super().__init__(**source_data)
        if start_index_modifier is not None:
            source_data['start_index_modifier'] = start_index_modifier
        self.sorting_extractor = self.Extractor(**source_data)
        self.verbose = verbose
 
